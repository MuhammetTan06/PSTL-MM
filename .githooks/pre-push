#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

echo 'Pre-commit to build puck2 in started';
git clone https://github.com/geoffreycopin/puck2.git puck2FolderCreatedByPreCommitScript
echo 'puck2 is successfully cloned'
cd ./puck2FolderCreatedByPreCommitScript
echo 'We are now in the cloned folder'
./gradlew
echo 'puck2.jar is successfully builded'
cp ./puck2.jar ../
echo "puck2.jar copied in projet's root directory"
cd ..
echo "Coming back to our project's root directory"
rm -rf puck2FolderCreatedByPreCommitScript
echo 'Cloned puck2 folder is deleted'
git add puck2.jar
echo 'puck2.jar is successfully added to git push stach'
git commit -m "[Automated task]: puck2.jar updated"
echo 'Committed puck2.jar'
echo 'All done here.'

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha
do
	if [ "$local_sha" = $z40 ]
	then
		# Handle delete
		:
	else
		if [ "$remote_sha" = $z40 ]
		then
			# New branch, examine all commits
			range="$local_sha"
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi

		# Check for WIP commit
		commit=`git rev-list -n 1 --grep '^WIP' "$range"`
		if [ -n "$commit" ]
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0
